CCS PCM C Compiler, Version 5.008, 5967               02-mar-15 13:26

               Filename:   D:\Projetos\Calendario\calendario.lst

               ROM used:   1634 words (80%)
                           Largest free fragment is 414
               RAM used:   29 (13%) at main() level
                           45 (20%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   57E
0003:  NOP
.................... ///* 
.................... // * calendario.c 
.................... // * 
.................... // *  Created on: 02/02/2012 
.................... // *      Author: cuki 
.................... // */ 
....................  
.................... #include<16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  44
0009:  RETLW  4F
000A:  RETLW  4D
000B:  RETLW  00
000C:  BCF    0A.0
000D:  BCF    0A.1
000E:  BCF    0A.2
000F:  ADDWF  02,F
0010:  RETLW  53
0011:  RETLW  45
0012:  RETLW  47
0013:  RETLW  00
0014:  BCF    0A.0
0015:  BCF    0A.1
0016:  BCF    0A.2
0017:  ADDWF  02,F
0018:  RETLW  54
0019:  RETLW  45
001A:  RETLW  52
001B:  RETLW  00
001C:  BCF    0A.0
001D:  BCF    0A.1
001E:  BCF    0A.2
001F:  ADDWF  02,F
0020:  RETLW  51
0021:  RETLW  55
0022:  RETLW  41
0023:  RETLW  00
0024:  BCF    0A.0
0025:  BCF    0A.1
0026:  BCF    0A.2
0027:  ADDWF  02,F
0028:  RETLW  51
0029:  RETLW  55
002A:  RETLW  49
002B:  RETLW  00
002C:  BCF    0A.0
002D:  BCF    0A.1
002E:  BCF    0A.2
002F:  ADDWF  02,F
0030:  RETLW  53
0031:  RETLW  45
0032:  RETLW  58
0033:  RETLW  00
0034:  BCF    0A.0
0035:  BCF    0A.1
0036:  BCF    0A.2
0037:  ADDWF  02,F
0038:  RETLW  53
0039:  RETLW  41
003A:  RETLW  42
003B:  RETLW  00
003C:  BCF    0A.0
003D:  BCF    0A.1
003E:  BCF    0A.2
003F:  ADDWF  02,F
0040:  RETLW  45
0041:  RETLW  52
0042:  RETLW  52
0043:  RETLW  00
0044:  BCF    0A.0
0045:  BCF    0A.1
0046:  BCF    0A.2
0047:  ADDWF  02,F
0048:  RETLW  31
0049:  RETLW  32
004A:  RETLW  68
004B:  RETLW  00
004C:  BCF    0A.0
004D:  BCF    0A.1
004E:  BCF    0A.2
004F:  ADDWF  02,F
0050:  RETLW  41
0051:  RETLW  4D
0052:  RETLW  00
0053:  BCF    0A.0
0054:  BCF    0A.1
0055:  BCF    0A.2
0056:  ADDWF  02,F
0057:  RETLW  50
0058:  RETLW  4D
0059:  RETLW  00
005A:  BCF    0A.0
005B:  BCF    0A.1
005C:  BCF    0A.2
005D:  ADDWF  02,F
005E:  RETLW  32
005F:  RETLW  34
0060:  RETLW  68
0061:  RETLW  00
0062:  BCF    0A.0
0063:  BCF    0A.1
0064:  BCF    0A.2
0065:  ADDWF  02,F
0066:  RETLW  20
0067:  RETLW  20
0068:  RETLW  00
0069:  BCF    0A.0
006A:  BCF    0A.1
006B:  BCF    0A.2
006C:  ADDWF  02,F
006D:  RETLW  0A
006E:  RETLW  25
006F:  RETLW  73
0070:  RETLW  20
0071:  RETLW  20
0072:  RETLW  20
0073:  RETLW  20
0074:  RETLW  20
0075:  RETLW  25
0076:  RETLW  30
0077:  RETLW  32
0078:  RETLW  64
0079:  RETLW  2F
007A:  RETLW  25
007B:  RETLW  30
007C:  RETLW  32
007D:  RETLW  64
007E:  RETLW  2F
007F:  RETLW  25
0080:  RETLW  30
0081:  RETLW  32
0082:  RETLW  64
0083:  RETLW  00
*
0198:  MOVF   3F,W
0199:  CLRF   78
019A:  SUBWF  3E,W
019B:  BTFSC  03.0
019C:  GOTO   1A0
019D:  MOVF   3E,W
019E:  MOVWF  77
019F:  GOTO   1AC
01A0:  CLRF   77
01A1:  MOVLW  08
01A2:  MOVWF  40
01A3:  RLF    3E,F
01A4:  RLF    77,F
01A5:  MOVF   3F,W
01A6:  SUBWF  77,W
01A7:  BTFSC  03.0
01A8:  MOVWF  77
01A9:  RLF    78,F
01AA:  DECFSZ 40,F
01AB:  GOTO   1A3
01AC:  RETURN
01AD:  CLRF   77
01AE:  CLRF   78
01AF:  MOVF   46,W
01B0:  BCF    03.0
01B1:  BTFSC  47.0
01B2:  ADDWF  77,F
01B3:  RRF    77,F
01B4:  RRF    78,F
01B5:  BTFSC  47.1
01B6:  ADDWF  77,F
01B7:  RRF    77,F
01B8:  RRF    78,F
01B9:  BTFSC  47.2
01BA:  ADDWF  77,F
01BB:  RRF    77,F
01BC:  RRF    78,F
01BD:  BTFSC  47.3
01BE:  ADDWF  77,F
01BF:  RRF    77,F
01C0:  RRF    78,F
01C1:  BTFSC  47.4
01C2:  ADDWF  77,F
01C3:  RRF    77,F
01C4:  RRF    78,F
01C5:  BTFSC  47.5
01C6:  ADDWF  77,F
01C7:  RRF    77,F
01C8:  RRF    78,F
01C9:  BTFSC  47.6
01CA:  ADDWF  77,F
01CB:  RRF    77,F
01CC:  RRF    78,F
01CD:  BTFSC  47.7
01CE:  ADDWF  77,F
01CF:  RRF    77,F
01D0:  RRF    78,F
01D1:  RETURN
*
0527:  MOVLW  20
0528:  BTFSS  39.4
0529:  MOVLW  30
052A:  MOVWF  3A
052B:  MOVF   38,W
052C:  MOVWF  77
052D:  BTFSS  38.7
052E:  GOTO   537
052F:  COMF   77,F
0530:  INCF   77,F
0531:  MOVF   77,W
0532:  MOVWF  38
0533:  MOVLW  2D
0534:  MOVWF  3A
0535:  BSF    39.7
0536:  BSF    39.0
0537:  MOVF   38,W
0538:  MOVWF  3E
0539:  MOVLW  64
053A:  MOVWF  3F
053B:  CALL   198
053C:  MOVF   77,W
053D:  MOVWF  38
053E:  MOVLW  30
053F:  ADDWF  78,W
0540:  MOVWF  3B
0541:  MOVF   38,W
0542:  MOVWF  3E
0543:  MOVLW  0A
0544:  MOVWF  3F
0545:  CALL   198
0546:  MOVLW  30
0547:  ADDWF  77,W
0548:  MOVWF  3D
0549:  MOVLW  30
054A:  ADDWF  78,W
054B:  MOVWF  3C
054C:  MOVF   3A,W
054D:  MOVWF  77
054E:  MOVLW  30
054F:  SUBWF  3B,W
0550:  BTFSC  03.2
0551:  GOTO   556
0552:  BSF    39.1
0553:  BTFSC  39.7
0554:  BSF    39.2
0555:  GOTO   56A
0556:  BTFSC  39.2
0557:  GOTO   56A
0558:  MOVF   3A,W
0559:  MOVWF  3B
055A:  BTFSC  39.1
055B:  GOTO   561
055C:  MOVLW  30
055D:  SUBWF  3C,W
055E:  BTFSC  03.2
055F:  GOTO   564
0560:  BSF    39.0
0561:  BTFSC  39.7
0562:  BSF    39.1
0563:  GOTO   56A
0564:  BTFSS  03.2
0565:  BSF    39.0
0566:  BTFSS  03.2
0567:  GOTO   56A
0568:  MOVF   3B,W
0569:  MOVWF  3C
056A:  BTFSC  39.2
056B:  GOTO   571
056C:  BTFSC  39.1
056D:  GOTO   574
056E:  BTFSC  39.0
056F:  GOTO   577
0570:  GOTO   57A
0571:  MOVF   3A,W
0572:  MOVWF  3E
0573:  CALL   505
0574:  MOVF   3B,W
0575:  MOVWF  3E
0576:  CALL   505
0577:  MOVF   3C,W
0578:  MOVWF  3E
0579:  CALL   505
057A:  MOVF   3D,W
057B:  MOVWF  3E
057C:  CALL   505
057D:  RETURN
....................  
.................... #list 
....................  
....................  
.................... #fuses INTRC_IO 
.................... #use delay(clock=4MHz) 
*
0084:  MOVLW  36
0085:  MOVWF  04
0086:  BCF    03.7
0087:  MOVF   00,W
0088:  BTFSC  03.2
0089:  GOTO   098
008A:  MOVLW  01
008B:  MOVWF  78
008C:  CLRF   77
008D:  DECFSZ 77,F
008E:  GOTO   08D
008F:  DECFSZ 78,F
0090:  GOTO   08C
0091:  MOVLW  4A
0092:  MOVWF  77
0093:  DECFSZ 77,F
0094:  GOTO   093
0095:  GOTO   096
0096:  DECFSZ 00,F
0097:  GOTO   08A
0098:  RETURN
.................... #use rs232(baud=9600,xmit=PIN_B2) 
*
0505:  BSF    03.5
0506:  BCF    06.2
0507:  BCF    03.5
0508:  BCF    06.2
0509:  MOVLW  08
050A:  MOVWF  78
050B:  GOTO   50C
050C:  NOP
050D:  BSF    78.7
050E:  GOTO   51D
050F:  BCF    78.7
0510:  RRF    3E,F
0511:  BTFSC  03.0
0512:  BSF    06.2
0513:  BTFSS  03.0
0514:  BCF    06.2
0515:  BSF    78.6
0516:  GOTO   51D
0517:  BCF    78.6
0518:  DECFSZ 78,F
0519:  GOTO   510
051A:  GOTO   51B
051B:  NOP
051C:  BSF    06.2
051D:  MOVLW  1C
051E:  MOVWF  04
051F:  DECFSZ 04,F
0520:  GOTO   51F
0521:  GOTO   522
0522:  BTFSC  78.7
0523:  GOTO   50F
0524:  BTFSC  78.6
0525:  GOTO   517
0526:  RETURN
.................... #use i2c(master, sda=PIN_B4, scl=PIN_B5, fast=50000, force_sw) 
*
0099:  MOVLW  08
009A:  MOVWF  78
009B:  NOP
009C:  BCF    06.5
009D:  BSF    03.5
009E:  BCF    06.5
009F:  NOP
00A0:  BCF    03.5
00A1:  RLF    40,F
00A2:  BCF    06.4
00A3:  BTFSS  03.0
00A4:  GOTO   0A8
00A5:  BSF    03.5
00A6:  BSF    06.4
00A7:  BCF    03.5
00A8:  BTFSC  03.0
00A9:  GOTO   0AD
00AA:  BSF    03.5
00AB:  BCF    06.4
00AC:  BCF    03.5
00AD:  BSF    03.5
00AE:  BSF    06.5
00AF:  BCF    03.5
00B0:  BTFSS  06.5
00B1:  GOTO   0B0
00B2:  DECFSZ 78,F
00B3:  GOTO   09B
00B4:  NOP
00B5:  BCF    06.5
00B6:  BSF    03.5
00B7:  BCF    06.5
00B8:  NOP
00B9:  BSF    06.4
00BA:  NOP
00BB:  NOP
00BC:  BSF    06.5
00BD:  BCF    03.5
00BE:  BTFSS  06.5
00BF:  GOTO   0BE
00C0:  CLRF   78
00C1:  NOP
00C2:  BTFSC  06.4
00C3:  BSF    78.0
00C4:  BCF    06.5
00C5:  BSF    03.5
00C6:  BCF    06.5
00C7:  BCF    03.5
00C8:  BCF    06.4
00C9:  BSF    03.5
00CA:  BCF    06.4
00CB:  BCF    03.5
00CC:  RETURN
*
00F7:  MOVLW  08
00F8:  MOVWF  41
00F9:  MOVF   77,W
00FA:  MOVWF  42
00FB:  BSF    03.5
00FC:  BSF    06.4
00FD:  NOP
00FE:  BSF    06.5
00FF:  BCF    03.5
0100:  BTFSS  06.5
0101:  GOTO   100
0102:  BTFSC  06.4
0103:  BSF    03.0
0104:  BTFSS  06.4
0105:  BCF    03.0
0106:  RLF    78,F
0107:  NOP
0108:  BSF    03.5
0109:  BCF    06.5
010A:  BCF    03.5
010B:  BCF    06.5
010C:  DECFSZ 41,F
010D:  GOTO   0FB
010E:  BSF    03.5
010F:  BSF    06.4
0110:  NOP
0111:  BCF    03.5
0112:  BCF    06.4
0113:  MOVF   42,W
0114:  BTFSC  03.2
0115:  GOTO   119
0116:  BSF    03.5
0117:  BCF    06.4
0118:  BCF    03.5
0119:  NOP
011A:  BSF    03.5
011B:  BSF    06.5
011C:  BCF    03.5
011D:  BTFSS  06.5
011E:  GOTO   11D
011F:  NOP
0120:  BCF    06.5
0121:  BSF    03.5
0122:  BCF    06.5
0123:  NOP
0124:  BCF    03.5
0125:  BCF    06.4
0126:  BSF    03.5
0127:  BCF    06.4
....................  
.................... #include "calendario.h" 
.................... /* 
....................  * calendario.h 
....................  * 
....................  *  Created on: 26/07/2013 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #ifndef CALENDARIO_H_ 
.................... #define CALENDARIO_H_ 
....................  
.................... #define DS1307		0xD0 
.................... #define sec_addr	0x00 
.................... #define min_addr	0x01 
.................... #define hour_addr	0x02 
.................... #define dow_addr	0x03 
.................... #define date_addr	0x04 
.................... #define month_addr	0x05 
.................... #define year_addr	0x06 
.................... #define ctlr_addr	0x07 
.................... #define debounce 	100 
....................  
.................... typedef enum dias_da_semana { 
.................... 	dom = 1, seg, ter, qua, qui, sex, sab 
.................... } dia_semana; 
....................  
.................... typedef struct str_cal { 
.................... 	short am_pm, _12h; 
.................... 	int segundos, minutos, horas, dow, dia, mes, ano; 
.................... } cal_type; 
....................  
.................... int decToBcd(int val) { 
.................... 	return ((val / 10 * 16) + (val % 10)); 
.................... } 
....................  
.................... int bcdToDec(int val) { 
.................... 	return ((val / 16 * 10) + (val % 16)); 
.................... } 
....................  
.................... int getReg(int addr) { 
.................... 	int leitura; 
....................  
.................... 	i2c_start(); 
*
00CD:  BSF    03.5
00CE:  BSF    06.4
00CF:  NOP
00D0:  BSF    06.5
00D1:  NOP
00D2:  BCF    03.5
00D3:  BCF    06.4
00D4:  BSF    03.5
00D5:  BCF    06.4
00D6:  NOP
00D7:  BCF    03.5
00D8:  BCF    06.5
00D9:  BSF    03.5
00DA:  BCF    06.5
.................... 	i2c_write(DS1307); 
00DB:  MOVLW  D0
00DC:  BCF    03.5
00DD:  MOVWF  40
00DE:  CALL   099
.................... 	i2c_write(addr); 
00DF:  MOVF   3E,W
00E0:  MOVWF  40
00E1:  CALL   099
.................... 	i2c_start(); 
00E2:  BSF    03.5
00E3:  BSF    06.4
00E4:  NOP
00E5:  BSF    06.5
00E6:  NOP
00E7:  BCF    03.5
00E8:  BTFSS  06.5
00E9:  GOTO   0E8
00EA:  BCF    06.4
00EB:  BSF    03.5
00EC:  BCF    06.4
00ED:  NOP
00EE:  BCF    03.5
00EF:  BCF    06.5
00F0:  BSF    03.5
00F1:  BCF    06.5
.................... 	i2c_write(DS1307 + 1); 
00F2:  MOVLW  D1
00F3:  BCF    03.5
00F4:  MOVWF  40
00F5:  CALL   099
.................... 	leitura = i2c_read(0); 
00F6:  CLRF   77
*
0128:  MOVF   78,W
0129:  BCF    03.5
012A:  MOVWF  3F
.................... 	i2c_stop(); 
012B:  BSF    03.5
012C:  BCF    06.4
012D:  NOP
012E:  BSF    06.5
012F:  BCF    03.5
0130:  BTFSS  06.5
0131:  GOTO   130
0132:  NOP
0133:  GOTO   134
0134:  NOP
0135:  BSF    03.5
0136:  BSF    06.4
0137:  NOP
....................  
.................... 	return leitura; 
0138:  BCF    03.5
0139:  MOVF   3F,W
013A:  MOVWF  78
013B:  RETURN
.................... } 
....................  
.................... void writeReg(int addr, int dado) { 
.................... 	i2c_start(); 
013C:  BSF    03.5
013D:  BSF    06.4
013E:  NOP
013F:  BSF    06.5
0140:  NOP
0141:  BCF    03.5
0142:  BCF    06.4
0143:  BSF    03.5
0144:  BCF    06.4
0145:  NOP
0146:  BCF    03.5
0147:  BCF    06.5
0148:  BSF    03.5
0149:  BCF    06.5
.................... 	i2c_write(DS1307); 
014A:  MOVLW  D0
014B:  BCF    03.5
014C:  MOVWF  40
014D:  CALL   099
.................... 	i2c_write(addr); 
014E:  MOVF   37,W
014F:  MOVWF  40
0150:  CALL   099
.................... 	i2c_write(dado); 
0151:  MOVF   38,W
0152:  MOVWF  40
0153:  CALL   099
.................... 	i2c_stop(); 
0154:  BSF    03.5
0155:  BCF    06.4
0156:  NOP
0157:  BSF    06.5
0158:  BCF    03.5
0159:  BTFSS  06.5
015A:  GOTO   159
015B:  NOP
015C:  GOTO   15D
015D:  NOP
015E:  BSF    03.5
015F:  BSF    06.4
0160:  NOP
0161:  BCF    03.5
0162:  RETURN
.................... } 
....................  
.................... void pause(void) { 
.................... 	int aux; 
....................  
.................... 	aux = getReg(sec_addr); 
.................... 	if (!bit_test(aux, 7)) 
.................... 		aux |= 0x80; 
.................... 	else 
.................... 		aux &= 0x7F; 
.................... 	writeReg(sec_addr, aux); 
.................... } 
....................  
.................... int toSec(int in) { 
.................... 	int lsb, msb; 
....................  
.................... 	lsb = in & 0x0F; 
*
0292:  MOVF   39,W
0293:  ANDLW  0F
0294:  MOVWF  3A
.................... 	msb = (in & 0x70) >> 4; 
0295:  MOVF   39,W
0296:  ANDLW  70
0297:  MOVWF  77
0298:  SWAPF  77,W
0299:  MOVWF  3B
029A:  MOVLW  0F
029B:  ANDWF  3B,F
....................  
.................... 	return 10 * msb + lsb; 
029C:  MOVLW  0A
029D:  MOVWF  46
029E:  MOVF   3B,W
029F:  MOVWF  47
02A0:  CALL   1AD
02A1:  MOVF   3A,W
02A2:  ADDWF  78,W
02A3:  MOVWF  78
02A4:  RETURN
.................... } 
....................  
.................... int toHour(int in, short **AM_PM, short **formato) { 
.................... 	int msb, lsb; 
....................  
.................... 	*formato = bit_test(in, 6); 
*
030D:  MOVF   42,W
030E:  MOVWF  04
030F:  BCF    03.7
0310:  BTFSC  43.0
0311:  BSF    03.7
0312:  MOVLW  00
0313:  BTFSC  3F.6
0314:  MOVLW  01
0315:  MOVWF  00
.................... 	if (*formato) { 
0316:  MOVF   43,W
0317:  MOVWF  7A
0318:  MOVF   42,W
0319:  MOVWF  04
031A:  BCF    03.7
031B:  BTFSC  7A.0
031C:  BSF    03.7
031D:  MOVF   00,F
031E:  BTFSC  03.2
031F:  GOTO   331
.................... 		msb = (in & 0x10) >> 4; 
0320:  MOVF   3F,W
0321:  ANDLW  10
0322:  MOVWF  77
0323:  SWAPF  77,W
0324:  MOVWF  44
0325:  MOVLW  0F
0326:  ANDWF  44,F
.................... 		*AM_PM = bit_test(in, 5); 
0327:  MOVF   40,W
0328:  MOVWF  04
0329:  BCF    03.7
032A:  BTFSC  41.0
032B:  BSF    03.7
032C:  MOVLW  00
032D:  BTFSC  3F.5
032E:  MOVLW  01
032F:  MOVWF  00
.................... 	} else { 
0330:  GOTO   338
.................... 		msb = (in & 0x30) >> 4; 
0331:  MOVF   3F,W
0332:  ANDLW  30
0333:  MOVWF  77
0334:  SWAPF  77,W
0335:  MOVWF  44
0336:  MOVLW  0F
0337:  ANDWF  44,F
.................... 	} 
.................... 	lsb = in & 0x0F; 
0338:  MOVF   3F,W
0339:  ANDLW  0F
033A:  MOVWF  45
....................  
.................... 	return 10 * msb + lsb; 
033B:  MOVLW  0A
033C:  MOVWF  46
033D:  MOVF   44,W
033E:  MOVWF  47
033F:  CALL   1AD
0340:  MOVF   45,W
0341:  ADDWF  78,W
0342:  MOVWF  78
.................... } 
....................  
.................... int toDate(int in) { 
.................... 	int msb, lsb; 
....................  
.................... 	lsb = in & 0x0F; 
*
0370:  MOVF   39,W
0371:  ANDLW  0F
0372:  MOVWF  3B
.................... 	msb = (in & 0x30) >> 4; 
0373:  MOVF   39,W
0374:  ANDLW  30
0375:  MOVWF  77
0376:  SWAPF  77,W
0377:  MOVWF  3A
0378:  MOVLW  0F
0379:  ANDWF  3A,F
....................  
.................... 	return msb * 10 + lsb; 
037A:  MOVF   3A,W
037B:  MOVWF  46
037C:  MOVLW  0A
037D:  MOVWF  47
037E:  CALL   1AD
037F:  MOVF   3B,W
0380:  ADDWF  78,W
0381:  MOVWF  78
.................... } 
....................  
.................... int toMonth(int in) { 
.................... 	int lsb, msb; 
....................  
.................... 	lsb = in & 0x0F; 
*
039C:  MOVF   39,W
039D:  ANDLW  0F
039E:  MOVWF  3A
.................... 	msb = (in & 0x10) >> 4; 
039F:  MOVF   39,W
03A0:  ANDLW  10
03A1:  MOVWF  77
03A2:  SWAPF  77,W
03A3:  MOVWF  3B
03A4:  MOVLW  0F
03A5:  ANDWF  3B,F
....................  
.................... 	return msb * 10 + lsb; 
03A6:  MOVF   3B,W
03A7:  MOVWF  46
03A8:  MOVLW  0A
03A9:  MOVWF  47
03AA:  CALL   1AD
03AB:  MOVF   3A,W
03AC:  ADDWF  78,W
03AD:  MOVWF  78
.................... } 
....................  
.................... int toYear(int in) { 
.................... 	int lsb, msb; 
....................  
.................... 	lsb = in & 0x0F; 
*
03C8:  MOVF   39,W
03C9:  ANDLW  0F
03CA:  MOVWF  3A
.................... 	msb = (in & 0xF0) >> 4; 
03CB:  MOVF   39,W
03CC:  ANDLW  F0
03CD:  MOVWF  77
03CE:  SWAPF  77,W
03CF:  MOVWF  3B
03D0:  MOVLW  0F
03D1:  ANDWF  3B,F
....................  
.................... 	return msb * 10 + lsb; 
03D2:  MOVF   3B,W
03D3:  MOVWF  46
03D4:  MOVLW  0A
03D5:  MOVWF  47
03D6:  CALL   1AD
03D7:  MOVF   3A,W
03D8:  ADDWF  78,W
03D9:  MOVWF  78
.................... } 
....................  
.................... int getSec(void) { 
.................... 	return toSec(getReg(sec_addr)); 
*
02B7:  CLRF   3E
02B8:  CALL   0CD
02B9:  MOVF   78,W
02BA:  MOVWF  38
02BB:  MOVWF  39
02BC:  CALL   292
02BD:  MOVF   78,W
.................... } 
....................  
.................... int getMin(void) { 
.................... 	return toSec(getReg(min_addr)); 
*
02D0:  MOVLW  01
02D1:  MOVWF  3E
02D2:  CALL   0CD
02D3:  MOVF   78,W
02D4:  MOVWF  38
02D5:  MOVWF  39
02D6:  CALL   292
02D7:  MOVF   78,W
.................... } 
....................  
.................... int getHour(short *AM_PM, short *formato) { 
.................... 	return toHour(getReg(hour_addr), &AM_PM, &formato); 
*
0300:  MOVLW  02
0301:  MOVWF  3E
0302:  CALL   0CD
0303:  MOVF   78,W
0304:  MOVWF  3E
0305:  MOVF   3E,W
0306:  MOVWF  3F
0307:  CLRF   41
0308:  MOVLW  3A
0309:  MOVWF  40
030A:  CLRF   43
030B:  MOVLW  3C
030C:  MOVWF  42
*
0343:  MOVF   78,W
.................... } 
....................  
.................... int getDayOfWeek(void) { 
.................... 	return getReg(dow_addr) & 0x07; 
*
02A5:  MOVLW  03
02A6:  MOVWF  3E
02A7:  CALL   0CD
02A8:  MOVF   78,W
02A9:  ANDLW  07
02AA:  MOVWF  78
02AB:  RETURN
.................... } 
....................  
.................... int getDayofWeekExt(int *str, cal_type *calendario) { 
....................  
.................... 	switch (calendario->dow) { 
*
044E:  MOVLW  04
044F:  ADDWF  36,W
0450:  MOVWF  04
0451:  BCF    03.7
0452:  BTFSC  37.0
0453:  BSF    03.7
0454:  MOVF   00,W
0455:  XORLW  01
0456:  BTFSC  03.2
0457:  GOTO   46B
0458:  XORLW  03
0459:  BTFSC  03.2
045A:  GOTO   47E
045B:  XORLW  01
045C:  BTFSC  03.2
045D:  GOTO   491
045E:  XORLW  07
045F:  BTFSC  03.2
0460:  GOTO   4A4
0461:  XORLW  01
0462:  BTFSC  03.2
0463:  GOTO   4B7
0464:  XORLW  03
0465:  BTFSC  03.2
0466:  GOTO   4CA
0467:  XORLW  01
0468:  BTFSC  03.2
0469:  GOTO   4DD
046A:  GOTO   4F0
.................... 	case dom: 
.................... 		strcpy(str, "DOM"); 
046B:  CLRF   38
046C:  CLRF   39
046D:  MOVF   34,W
046E:  MOVWF  04
046F:  BCF    03.7
0470:  BTFSC  35.0
0471:  BSF    03.7
0472:  MOVF   38,W
0473:  ADDWF  04,F
0474:  MOVF   39,W
0475:  CALL   004
0476:  MOVWF  00
0477:  IORLW  00
0478:  BTFSC  03.2
0479:  GOTO   47D
047A:  INCF   39,F
047B:  INCF   38,F
047C:  GOTO   46D
.................... 		break; 
047D:  GOTO   502
.................... 	case seg: 
.................... 		strcpy(str, "SEG"); 
047E:  CLRF   38
047F:  CLRF   39
0480:  MOVF   34,W
0481:  MOVWF  04
0482:  BCF    03.7
0483:  BTFSC  35.0
0484:  BSF    03.7
0485:  MOVF   38,W
0486:  ADDWF  04,F
0487:  MOVF   39,W
0488:  CALL   00C
0489:  MOVWF  00
048A:  IORLW  00
048B:  BTFSC  03.2
048C:  GOTO   490
048D:  INCF   39,F
048E:  INCF   38,F
048F:  GOTO   480
.................... 		break; 
0490:  GOTO   502
.................... 	case ter: 
.................... 		strcpy(str, "TER"); 
0491:  CLRF   38
0492:  CLRF   39
0493:  MOVF   34,W
0494:  MOVWF  04
0495:  BCF    03.7
0496:  BTFSC  35.0
0497:  BSF    03.7
0498:  MOVF   38,W
0499:  ADDWF  04,F
049A:  MOVF   39,W
049B:  CALL   014
049C:  MOVWF  00
049D:  IORLW  00
049E:  BTFSC  03.2
049F:  GOTO   4A3
04A0:  INCF   39,F
04A1:  INCF   38,F
04A2:  GOTO   493
.................... 		break; 
04A3:  GOTO   502
.................... 	case qua: 
.................... 		strcpy(str, "QUA"); 
04A4:  CLRF   38
04A5:  CLRF   39
04A6:  MOVF   34,W
04A7:  MOVWF  04
04A8:  BCF    03.7
04A9:  BTFSC  35.0
04AA:  BSF    03.7
04AB:  MOVF   38,W
04AC:  ADDWF  04,F
04AD:  MOVF   39,W
04AE:  CALL   01C
04AF:  MOVWF  00
04B0:  IORLW  00
04B1:  BTFSC  03.2
04B2:  GOTO   4B6
04B3:  INCF   39,F
04B4:  INCF   38,F
04B5:  GOTO   4A6
.................... 		break; 
04B6:  GOTO   502
.................... 	case qui: 
.................... 		strcpy(str, "QUI"); 
04B7:  CLRF   38
04B8:  CLRF   39
04B9:  MOVF   34,W
04BA:  MOVWF  04
04BB:  BCF    03.7
04BC:  BTFSC  35.0
04BD:  BSF    03.7
04BE:  MOVF   38,W
04BF:  ADDWF  04,F
04C0:  MOVF   39,W
04C1:  CALL   024
04C2:  MOVWF  00
04C3:  IORLW  00
04C4:  BTFSC  03.2
04C5:  GOTO   4C9
04C6:  INCF   39,F
04C7:  INCF   38,F
04C8:  GOTO   4B9
.................... 		break; 
04C9:  GOTO   502
.................... 	case sex: 
.................... 		strcpy(str, "SEX"); 
04CA:  CLRF   38
04CB:  CLRF   39
04CC:  MOVF   34,W
04CD:  MOVWF  04
04CE:  BCF    03.7
04CF:  BTFSC  35.0
04D0:  BSF    03.7
04D1:  MOVF   38,W
04D2:  ADDWF  04,F
04D3:  MOVF   39,W
04D4:  CALL   02C
04D5:  MOVWF  00
04D6:  IORLW  00
04D7:  BTFSC  03.2
04D8:  GOTO   4DC
04D9:  INCF   39,F
04DA:  INCF   38,F
04DB:  GOTO   4CC
.................... 		break; 
04DC:  GOTO   502
.................... 	case sab: 
.................... 		strcpy(str, "SAB"); 
04DD:  CLRF   38
04DE:  CLRF   39
04DF:  MOVF   34,W
04E0:  MOVWF  04
04E1:  BCF    03.7
04E2:  BTFSC  35.0
04E3:  BSF    03.7
04E4:  MOVF   38,W
04E5:  ADDWF  04,F
04E6:  MOVF   39,W
04E7:  CALL   034
04E8:  MOVWF  00
04E9:  IORLW  00
04EA:  BTFSC  03.2
04EB:  GOTO   4EF
04EC:  INCF   39,F
04ED:  INCF   38,F
04EE:  GOTO   4DF
.................... 		break; 
04EF:  GOTO   502
.................... 	default: 
.................... 		strcpy(str, "ERR"); 
04F0:  CLRF   38
04F1:  CLRF   39
04F2:  MOVF   34,W
04F3:  MOVWF  04
04F4:  BCF    03.7
04F5:  BTFSC  35.0
04F6:  BSF    03.7
04F7:  MOVF   38,W
04F8:  ADDWF  04,F
04F9:  MOVF   39,W
04FA:  CALL   03C
04FB:  MOVWF  00
04FC:  IORLW  00
04FD:  BTFSC  03.2
04FE:  GOTO   502
04FF:  INCF   39,F
0500:  INCF   38,F
0501:  GOTO   4F2
.................... 		break; 
.................... 	} 
....................  
.................... 	return getDayOfWeek(); 
0502:  CALL   2A5
0503:  MOVF   78,W
0504:  GOTO   5CD (RETURN)
.................... } 
....................  
.................... void getFormato(int *formato, int *AM_PM, cal_type *calendario) { 
.................... 	if (calendario->_12h) { 
*
03E3:  MOVF   38,W
03E4:  MOVWF  04
03E5:  BCF    03.7
03E6:  BTFSC  39.0
03E7:  BSF    03.7
03E8:  BTFSS  00.1
03E9:  GOTO   429
.................... 		strcpy(formato, "12h"); 
03EA:  CLRF   3A
03EB:  CLRF   3B
03EC:  MOVF   34,W
03ED:  MOVWF  04
03EE:  BCF    03.7
03EF:  BTFSC  35.0
03F0:  BSF    03.7
03F1:  MOVF   3A,W
03F2:  ADDWF  04,F
03F3:  MOVF   3B,W
03F4:  CALL   044
03F5:  MOVWF  00
03F6:  IORLW  00
03F7:  BTFSC  03.2
03F8:  GOTO   3FC
03F9:  INCF   3B,F
03FA:  INCF   3A,F
03FB:  GOTO   3EC
.................... 		if (calendario->am_pm) 
03FC:  MOVF   38,W
03FD:  MOVWF  04
03FE:  BCF    03.7
03FF:  BTFSC  39.0
0400:  BSF    03.7
0401:  BTFSS  00.0
0402:  GOTO   416
.................... 			strcpy(AM_PM, "AM"); 
0403:  CLRF   3A
0404:  CLRF   3B
0405:  MOVF   36,W
0406:  MOVWF  04
0407:  BCF    03.7
0408:  BTFSC  37.0
0409:  BSF    03.7
040A:  MOVF   3A,W
040B:  ADDWF  04,F
040C:  MOVF   3B,W
040D:  CALL   04C
040E:  MOVWF  00
040F:  IORLW  00
0410:  BTFSC  03.2
0411:  GOTO   415
0412:  INCF   3B,F
0413:  INCF   3A,F
0414:  GOTO   405
0415:  GOTO   428
.................... 		else 
.................... 			strcpy(AM_PM, "PM"); 
0416:  CLRF   3A
0417:  CLRF   3B
0418:  MOVF   36,W
0419:  MOVWF  04
041A:  BCF    03.7
041B:  BTFSC  37.0
041C:  BSF    03.7
041D:  MOVF   3A,W
041E:  ADDWF  04,F
041F:  MOVF   3B,W
0420:  CALL   053
0421:  MOVWF  00
0422:  IORLW  00
0423:  BTFSC  03.2
0424:  GOTO   428
0425:  INCF   3B,F
0426:  INCF   3A,F
0427:  GOTO   418
.................... 	} else { 
0428:  GOTO   44D
.................... 		strcpy(formato, "24h"); 
0429:  CLRF   3A
042A:  CLRF   3B
042B:  MOVF   34,W
042C:  MOVWF  04
042D:  BCF    03.7
042E:  BTFSC  35.0
042F:  BSF    03.7
0430:  MOVF   3A,W
0431:  ADDWF  04,F
0432:  MOVF   3B,W
0433:  CALL   05A
0434:  MOVWF  00
0435:  IORLW  00
0436:  BTFSC  03.2
0437:  GOTO   43B
0438:  INCF   3B,F
0439:  INCF   3A,F
043A:  GOTO   42B
.................... 		strcpy(AM_PM, "  "); 
043B:  CLRF   3A
043C:  CLRF   3B
043D:  MOVF   36,W
043E:  MOVWF  04
043F:  BCF    03.7
0440:  BTFSC  37.0
0441:  BSF    03.7
0442:  MOVF   3A,W
0443:  ADDWF  04,F
0444:  MOVF   3B,W
0445:  CALL   062
0446:  MOVWF  00
0447:  IORLW  00
0448:  BTFSC  03.2
0449:  GOTO   44D
044A:  INCF   3B,F
044B:  INCF   3A,F
044C:  GOTO   43D
.................... 	} 
044D:  GOTO   5C4 (RETURN)
.................... } 
....................  
.................... int getDate(void) { 
.................... 	return toDate(getReg(date_addr)); 
*
0369:  MOVLW  04
036A:  MOVWF  3E
036B:  CALL   0CD
036C:  MOVF   78,W
036D:  MOVWF  38
036E:  MOVF   38,W
036F:  MOVWF  39
*
0382:  MOVF   78,W
.................... } 
....................  
.................... int getMonth(void) { 
.................... 	return toMonth(getReg(month_addr)); 
*
0395:  MOVLW  05
0396:  MOVWF  3E
0397:  CALL   0CD
0398:  MOVF   78,W
0399:  MOVWF  38
039A:  MOVF   38,W
039B:  MOVWF  39
*
03AE:  MOVF   78,W
.................... } 
....................  
.................... int getYear(void) { 
.................... 	return toYear(getReg(year_addr)); 
*
03C1:  MOVLW  06
03C2:  MOVWF  3E
03C3:  CALL   0CD
03C4:  MOVF   78,W
03C5:  MOVWF  38
03C6:  MOVF   38,W
03C7:  MOVWF  39
*
03DA:  MOVF   78,W
.................... } 
....................  
.................... short initDS1307(void) { 
*
0163:  BSF    35.0
.................... 	int aux; 
.................... 	short ack = 1; 
....................  
.................... 	i2c_start(); 
0164:  BSF    03.5
0165:  BSF    06.4
0166:  NOP
0167:  BSF    06.5
0168:  NOP
0169:  BCF    03.5
016A:  BCF    06.4
016B:  BSF    03.5
016C:  BCF    06.4
016D:  NOP
016E:  BCF    03.5
016F:  BCF    06.5
0170:  BSF    03.5
0171:  BCF    06.5
.................... 	ack = i2c_write(DS1307); 
0172:  MOVLW  D0
0173:  BCF    03.5
0174:  MOVWF  40
0175:  CALL   099
0176:  MOVF   78,W
0177:  BCF    35.0
0178:  BTFSC  78.0
0179:  BSF    35.0
.................... 	i2c_stop(); 
017A:  BSF    03.5
017B:  BCF    06.4
017C:  NOP
017D:  BSF    06.5
017E:  BCF    03.5
017F:  BTFSS  06.5
0180:  GOTO   17F
0181:  NOP
0182:  GOTO   183
0183:  NOP
0184:  BSF    03.5
0185:  BSF    06.4
0186:  NOP
....................  
.................... 	if (!ack) 
0187:  BCF    03.5
0188:  BTFSC  35.0
0189:  GOTO   193
.................... 		writeReg(sec_addr, getReg(sec_addr) & 0x7F); 
018A:  CLRF   3E
018B:  CALL   0CD
018C:  MOVF   78,W
018D:  ANDLW  7F
018E:  MOVWF  36
018F:  CLRF   37
0190:  MOVF   36,W
0191:  MOVWF  38
0192:  CALL   13C
....................  
.................... 	return ack; 
0193:  MOVLW  00
0194:  BTFSC  35.0
0195:  MOVLW  01
0196:  MOVWF  78
0197:  GOTO   58D (RETURN)
.................... } 
....................  
.................... void getDS1307(cal_type *calendario) { 
.................... 	calendario->segundos = getSec(); 
*
02AC:  MOVLW  01
02AD:  ADDWF  34,W
02AE:  MOVWF  78
02AF:  MOVF   35,W
02B0:  MOVWF  7A
02B1:  BTFSC  03.0
02B2:  INCF   7A,F
02B3:  MOVF   78,W
02B4:  MOVWF  36
02B5:  MOVF   7A,W
02B6:  MOVWF  37
*
02BE:  MOVF   36,W
02BF:  MOVWF  04
02C0:  BCF    03.7
02C1:  BTFSC  37.0
02C2:  BSF    03.7
02C3:  MOVF   78,W
02C4:  MOVWF  00
.................... 	calendario->minutos = getMin(); 
02C5:  MOVLW  02
02C6:  ADDWF  34,W
02C7:  MOVWF  78
02C8:  MOVF   35,W
02C9:  MOVWF  7A
02CA:  BTFSC  03.0
02CB:  INCF   7A,F
02CC:  MOVF   78,W
02CD:  MOVWF  36
02CE:  MOVF   7A,W
02CF:  MOVWF  37
*
02D8:  MOVF   36,W
02D9:  MOVWF  04
02DA:  BCF    03.7
02DB:  BTFSC  37.0
02DC:  BSF    03.7
02DD:  MOVF   78,W
02DE:  MOVWF  00
.................... 	calendario->horas = getHour(calendario->am_pm, calendario->_12h); 
02DF:  MOVLW  03
02E0:  ADDWF  34,W
02E1:  MOVWF  78
02E2:  MOVF   35,W
02E3:  MOVWF  7A
02E4:  BTFSC  03.0
02E5:  INCF   7A,F
02E6:  MOVF   78,W
02E7:  MOVWF  36
02E8:  MOVF   7A,W
02E9:  MOVWF  37
02EA:  MOVF   34,W
02EB:  MOVWF  04
02EC:  BCF    03.7
02ED:  BTFSC  35.0
02EE:  BSF    03.7
02EF:  CLRF   38
02F0:  BTFSC  00.0
02F1:  INCF   38,F
02F2:  MOVF   34,W
02F3:  MOVWF  04
02F4:  BCF    03.7
02F5:  BTFSC  35.0
02F6:  BSF    03.7
02F7:  CLRF   39
02F8:  BTFSC  00.1
02F9:  INCF   39,F
02FA:  CLRF   3B
02FB:  MOVF   38,W
02FC:  MOVWF  3A
02FD:  CLRF   3D
02FE:  MOVF   39,W
02FF:  MOVWF  3C
*
0344:  MOVF   36,W
0345:  MOVWF  04
0346:  BCF    03.7
0347:  BTFSC  37.0
0348:  BSF    03.7
0349:  MOVF   78,W
034A:  MOVWF  00
.................... 	calendario->dow = getDayOfWeek(); 
034B:  MOVLW  04
034C:  ADDWF  34,W
034D:  MOVWF  78
034E:  MOVF   35,W
034F:  MOVWF  7A
0350:  BTFSC  03.0
0351:  INCF   7A,F
0352:  MOVF   78,W
0353:  MOVWF  36
0354:  MOVF   7A,W
0355:  MOVWF  37
0356:  CALL   2A5
0357:  MOVF   36,W
0358:  MOVWF  04
0359:  BCF    03.7
035A:  BTFSC  37.0
035B:  BSF    03.7
035C:  MOVF   78,W
035D:  MOVWF  00
.................... 	calendario->dia = getDate(); 
035E:  MOVLW  05
035F:  ADDWF  34,W
0360:  MOVWF  78
0361:  MOVF   35,W
0362:  MOVWF  7A
0363:  BTFSC  03.0
0364:  INCF   7A,F
0365:  MOVF   78,W
0366:  MOVWF  36
0367:  MOVF   7A,W
0368:  MOVWF  37
*
0383:  MOVF   36,W
0384:  MOVWF  04
0385:  BCF    03.7
0386:  BTFSC  37.0
0387:  BSF    03.7
0388:  MOVF   78,W
0389:  MOVWF  00
.................... 	calendario->mes = getMonth(); 
038A:  MOVLW  06
038B:  ADDWF  34,W
038C:  MOVWF  78
038D:  MOVF   35,W
038E:  MOVWF  7A
038F:  BTFSC  03.0
0390:  INCF   7A,F
0391:  MOVF   78,W
0392:  MOVWF  36
0393:  MOVF   7A,W
0394:  MOVWF  37
*
03AF:  MOVF   36,W
03B0:  MOVWF  04
03B1:  BCF    03.7
03B2:  BTFSC  37.0
03B3:  BSF    03.7
03B4:  MOVF   78,W
03B5:  MOVWF  00
.................... 	calendario->ano = getYear(); 
03B6:  MOVLW  07
03B7:  ADDWF  34,W
03B8:  MOVWF  78
03B9:  MOVF   35,W
03BA:  MOVWF  7A
03BB:  BTFSC  03.0
03BC:  INCF   7A,F
03BD:  MOVF   78,W
03BE:  MOVWF  36
03BF:  MOVF   7A,W
03C0:  MOVWF  37
*
03DB:  MOVF   36,W
03DC:  MOVWF  04
03DD:  BCF    03.7
03DE:  BTFSC  37.0
03DF:  BSF    03.7
03E0:  MOVF   78,W
03E1:  MOVWF  00
03E2:  GOTO   5BA (RETURN)
.................... } 
....................  
.................... int toBcd(int in) { 
.................... 	int unidade, dezena; 
....................  
.................... 	dezena = in / 10; 
*
01D2:  MOVF   38,W
01D3:  MOVWF  3E
01D4:  MOVLW  0A
01D5:  MOVWF  3F
01D6:  CALL   198
01D7:  MOVF   78,W
01D8:  MOVWF  3A
.................... 	unidade = in - dezena * 10; 
01D9:  MOVF   3A,W
01DA:  MOVWF  46
01DB:  MOVLW  0A
01DC:  MOVWF  47
01DD:  CALL   1AD
01DE:  MOVF   78,W
01DF:  SUBWF  38,W
01E0:  MOVWF  39
....................  
.................... 	return (dezena << 4) | unidade; 
01E1:  SWAPF  3A,W
01E2:  MOVWF  77
01E3:  MOVLW  F0
01E4:  ANDWF  77,F
01E5:  MOVF   77,W
01E6:  IORWF  39,W
01E7:  MOVWF  78
01E8:  RETURN
.................... } 
....................  
.................... void setDS1307(cal_type *calen) { 
....................  
.................... 	writeReg(sec_addr, toBcd(calen->segundos & 0x7F)); 
01E9:  MOVLW  01
01EA:  ADDWF  34,W
01EB:  MOVWF  04
01EC:  BCF    03.7
01ED:  BTFSC  35.0
01EE:  BSF    03.7
01EF:  MOVF   00,W
01F0:  ANDLW  7F
01F1:  MOVWF  36
01F2:  MOVWF  38
01F3:  CALL   1D2
01F4:  MOVF   78,W
01F5:  MOVWF  36
01F6:  CLRF   37
01F7:  MOVF   78,W
01F8:  MOVWF  38
01F9:  CALL   13C
.................... 	delay_ms(1); 
01FA:  MOVLW  01
01FB:  MOVWF  36
01FC:  CALL   084
....................  
.................... 	writeReg(min_addr, toBcd(calen->minutos & 0x7F)); 
01FD:  MOVLW  02
01FE:  ADDWF  34,W
01FF:  MOVWF  04
0200:  BCF    03.7
0201:  BTFSC  35.0
0202:  BSF    03.7
0203:  MOVF   00,W
0204:  ANDLW  7F
0205:  MOVWF  36
0206:  MOVWF  38
0207:  CALL   1D2
0208:  MOVF   78,W
0209:  MOVWF  36
020A:  MOVLW  01
020B:  MOVWF  37
020C:  MOVF   78,W
020D:  MOVWF  38
020E:  CALL   13C
.................... 	delay_ms(1); 
020F:  MOVLW  01
0210:  MOVWF  36
0211:  CALL   084
....................  
.................... 	writeReg(hour_addr, 
.................... 			((int) calen->_12h << 6) | ((int) calen->am_pm << 5) 
.................... 					| toBcd(calen->horas & 0x3F)); 
0212:  MOVF   34,W
0213:  MOVWF  04
0214:  BCF    03.7
0215:  BTFSC  35.0
0216:  BSF    03.7
0217:  SWAPF  00,W
0218:  MOVWF  36
0219:  RLF    36,F
021A:  RLF    36,F
021B:  MOVLW  C0
021C:  ANDWF  36,F
021D:  MOVF   34,W
021E:  MOVWF  04
021F:  BCF    03.7
0220:  BTFSC  35.0
0221:  BSF    03.7
0222:  SWAPF  00,W
0223:  MOVWF  77
0224:  RLF    77,F
0225:  MOVLW  E0
0226:  ANDWF  77,F
0227:  MOVF   77,W
0228:  IORWF  36,F
0229:  MOVLW  03
022A:  ADDWF  34,W
022B:  MOVWF  04
022C:  BCF    03.7
022D:  BTFSC  35.0
022E:  BSF    03.7
022F:  MOVF   00,W
0230:  ANDLW  3F
0231:  MOVWF  37
0232:  MOVWF  38
0233:  CALL   1D2
0234:  MOVF   78,W
0235:  IORWF  36,F
0236:  MOVLW  02
0237:  MOVWF  37
0238:  MOVF   36,W
0239:  MOVWF  38
023A:  CALL   13C
.................... 	delay_ms(1); 
023B:  MOVLW  01
023C:  MOVWF  36
023D:  CALL   084
....................  
.................... 	writeReg(dow_addr, calen->dow & 0x07); 
023E:  MOVLW  04
023F:  ADDWF  34,W
0240:  MOVWF  04
0241:  BCF    03.7
0242:  BTFSC  35.0
0243:  BSF    03.7
0244:  MOVF   00,W
0245:  ANDLW  07
0246:  MOVWF  36
0247:  MOVLW  03
0248:  MOVWF  37
0249:  MOVF   36,W
024A:  MOVWF  38
024B:  CALL   13C
.................... 	delay_ms(1); 
024C:  MOVLW  01
024D:  MOVWF  36
024E:  CALL   084
....................  
.................... 	writeReg(date_addr, toBcd(calen->dia & 0x3F)); 
024F:  MOVLW  05
0250:  ADDWF  34,W
0251:  MOVWF  04
0252:  BCF    03.7
0253:  BTFSC  35.0
0254:  BSF    03.7
0255:  MOVF   00,W
0256:  ANDLW  3F
0257:  MOVWF  36
0258:  MOVWF  38
0259:  CALL   1D2
025A:  MOVF   78,W
025B:  MOVWF  36
025C:  MOVLW  04
025D:  MOVWF  37
025E:  MOVF   78,W
025F:  MOVWF  38
0260:  CALL   13C
.................... 	delay_ms(1); 
0261:  MOVLW  01
0262:  MOVWF  36
0263:  CALL   084
....................  
.................... 	writeReg(month_addr, toBcd(calen->mes & 0x1F)); 
0264:  MOVLW  06
0265:  ADDWF  34,W
0266:  MOVWF  04
0267:  BCF    03.7
0268:  BTFSC  35.0
0269:  BSF    03.7
026A:  MOVF   00,W
026B:  ANDLW  1F
026C:  MOVWF  36
026D:  MOVWF  38
026E:  CALL   1D2
026F:  MOVF   78,W
0270:  MOVWF  36
0271:  MOVLW  05
0272:  MOVWF  37
0273:  MOVF   78,W
0274:  MOVWF  38
0275:  CALL   13C
.................... 	delay_ms(1); 
0276:  MOVLW  01
0277:  MOVWF  36
0278:  CALL   084
....................  
.................... 	writeReg(year_addr, toBcd(calen->ano)); 
0279:  MOVLW  07
027A:  ADDWF  34,W
027B:  MOVWF  04
027C:  BCF    03.7
027D:  BTFSC  35.0
027E:  BSF    03.7
027F:  MOVF   00,W
0280:  MOVWF  36
0281:  MOVWF  38
0282:  CALL   1D2
0283:  MOVF   78,W
0284:  MOVWF  36
0285:  MOVLW  06
0286:  MOVWF  37
0287:  MOVF   78,W
0288:  MOVWF  38
0289:  CALL   13C
.................... 	delay_ms(1); 
028A:  MOVLW  01
028B:  MOVWF  36
028C:  CALL   084
....................  
.................... 	writeReg(0x07, 0x00); 
028D:  MOVLW  07
028E:  MOVWF  37
028F:  CLRF   38
0290:  CALL   13C
0291:  GOTO   5AC (RETURN)
.................... } 
....................  
.................... #endif /* CALENDARIO_H_ */ 
....................  
....................  
.................... cal_type calendario; 
.................... int formato[4], AM_PM[3], diaSemana[4], aux; 
....................  
.................... int main(void) { 
*
057E:  MOVF   03,W
057F:  ANDLW  1F
0580:  MOVWF  03
0581:  BSF    03.5
0582:  BSF    0E.3
0583:  BCF    06.2
0584:  BCF    03.5
0585:  BSF    06.2
0586:  MOVLW  07
0587:  MOVWF  1F
0588:  BCF    03.7
....................  
.................... 	delay_ms(100); 
0589:  MOVLW  64
058A:  MOVWF  36
058B:  CALL   084
.................... 	initDS1307(); 
058C:  GOTO   163
....................  
.................... 	while (TRUE) { 
....................  
.................... 		if (!input(PIN_B0)) { 
058D:  BSF    03.5
058E:  BSF    06.0
058F:  BCF    03.5
0590:  BTFSC  06.0
0591:  GOTO   5B3
.................... 			delay_ms(100); 
0592:  MOVLW  64
0593:  MOVWF  36
0594:  CALL   084
.................... 			if (!input(PIN_B0)) { 
0595:  BSF    03.5
0596:  BSF    06.0
0597:  BCF    03.5
0598:  BTFSC  06.0
0599:  GOTO   5B3
.................... 				calendario.segundos = 0; 
059A:  CLRF   21
.................... 				calendario.minutos = 26; 
059B:  MOVLW  1A
059C:  MOVWF  22
.................... 				calendario.horas = 13; 
059D:  MOVLW  0D
059E:  MOVWF  23
.................... 				calendario.dow = seg; 
059F:  MOVLW  02
05A0:  MOVWF  24
.................... 				calendario.dia = 2; 
05A1:  MOVWF  25
.................... 				calendario.mes = 3; 
05A2:  MOVLW  03
05A3:  MOVWF  26
.................... 				calendario.ano = 15; 
05A4:  MOVLW  0F
05A5:  MOVWF  27
.................... 				calendario._12h = 0; 
05A6:  BCF    20.1
.................... 				calendario.am_pm = 0; 
05A7:  BCF    20.0
.................... 				setDS1307(&calendario); 
05A8:  CLRF   35
05A9:  MOVLW  20
05AA:  MOVWF  34
05AB:  GOTO   1E9
.................... 				delay_ms(500); 
05AC:  MOVLW  02
05AD:  MOVWF  34
05AE:  MOVLW  FA
05AF:  MOVWF  36
05B0:  CALL   084
05B1:  DECFSZ 34,F
05B2:  GOTO   5AE
.................... 			} 
.................... 		} 
....................  
.................... 		delay_ms(100); 
05B3:  MOVLW  64
05B4:  MOVWF  36
05B5:  CALL   084
.................... 		getDS1307(&calendario); 
05B6:  CLRF   35
05B7:  MOVLW  20
05B8:  MOVWF  34
05B9:  GOTO   2AC
....................  
.................... 		getFormato(formato, AM_PM, &calendario); 
05BA:  CLRF   35
05BB:  MOVLW  28
05BC:  MOVWF  34
05BD:  CLRF   37
05BE:  MOVLW  2C
05BF:  MOVWF  36
05C0:  CLRF   39
05C1:  MOVLW  20
05C2:  MOVWF  38
05C3:  GOTO   3E3
....................  
.................... 		AM_PM[2] = '\0'; 
05C4:  CLRF   2E
.................... 		formato[3] = '\0'; 
05C5:  CLRF   2B
....................  
.................... 		getDayofWeekExt(diaSemana, &calendario); 
05C6:  CLRF   35
05C7:  MOVLW  2F
05C8:  MOVWF  34
05C9:  CLRF   37
05CA:  MOVLW  20
05CB:  MOVWF  36
05CC:  GOTO   44E
.................... 		diaSemana[3] = '\0'; 
05CD:  CLRF   32
....................  
.................... 		if (aux != calendario.segundos) { 
05CE:  MOVF   21,W
05CF:  SUBWF  33,W
05D0:  BTFSC  03.2
05D1:  GOTO   65E
.................... 			aux = calendario.segundos; 
05D2:  MOVF   21,W
05D3:  MOVWF  33
.................... 			printf("\f%s %s  %02d:%02d:%02d", formato, AM_PM, calendario.horas, 
.................... 					calendario.minutos, calendario.segundos); 
05D4:  MOVLW  0C
05D5:  MOVWF  3E
05D6:  CALL   505
05D7:  MOVLW  28
05D8:  MOVWF  04
05D9:  BCF    03.7
05DA:  MOVLW  00
05DB:  IORWF  00,W
05DC:  BTFSC  03.2
05DD:  GOTO   5EE
05DE:  CLRF   35
05DF:  MOVF   04,W
05E0:  MOVWF  34
05E1:  BCF    35.0
05E2:  BTFSC  03.7
05E3:  BSF    35.0
05E4:  MOVF   00,W
05E5:  MOVWF  3E
05E6:  CALL   505
05E7:  MOVF   34,W
05E8:  MOVWF  04
05E9:  BCF    03.7
05EA:  BTFSC  35.0
05EB:  BSF    03.7
05EC:  INCF   04,F
05ED:  GOTO   5DA
05EE:  MOVLW  20
05EF:  MOVWF  3E
05F0:  CALL   505
05F1:  MOVLW  2C
05F2:  MOVWF  04
05F3:  BCF    03.7
05F4:  MOVLW  00
05F5:  IORWF  00,W
05F6:  BTFSC  03.2
05F7:  GOTO   608
05F8:  CLRF   37
05F9:  MOVF   04,W
05FA:  MOVWF  36
05FB:  BCF    37.0
05FC:  BTFSC  03.7
05FD:  BSF    37.0
05FE:  MOVF   00,W
05FF:  MOVWF  3E
0600:  CALL   505
0601:  MOVF   36,W
0602:  MOVWF  04
0603:  BCF    03.7
0604:  BTFSC  37.0
0605:  BSF    03.7
0606:  INCF   04,F
0607:  GOTO   5F4
0608:  MOVLW  20
0609:  MOVWF  3E
060A:  CALL   505
060B:  MOVLW  20
060C:  MOVWF  3E
060D:  CALL   505
060E:  MOVF   23,W
060F:  MOVWF  38
0610:  MOVLW  01
0611:  MOVWF  39
0612:  CALL   527
0613:  MOVLW  3A
0614:  MOVWF  3E
0615:  CALL   505
0616:  MOVF   22,W
0617:  MOVWF  38
0618:  MOVLW  01
0619:  MOVWF  39
061A:  CALL   527
061B:  MOVLW  3A
061C:  MOVWF  3E
061D:  CALL   505
061E:  MOVF   21,W
061F:  MOVWF  38
0620:  MOVLW  01
0621:  MOVWF  39
0622:  CALL   527
.................... 			printf("\n%s     %02d/%02d/%02d", diaSemana, calendario.dia, 
.................... 					calendario.mes, calendario.ano); 
0623:  MOVLW  0A
0624:  MOVWF  3E
0625:  CALL   505
0626:  MOVLW  2F
0627:  MOVWF  04
0628:  BCF    03.7
0629:  MOVLW  00
062A:  IORWF  00,W
062B:  BTFSC  03.2
062C:  GOTO   63D
062D:  CLRF   35
062E:  MOVF   04,W
062F:  MOVWF  34
0630:  BCF    35.0
0631:  BTFSC  03.7
0632:  BSF    35.0
0633:  MOVF   00,W
0634:  MOVWF  3E
0635:  CALL   505
0636:  MOVF   34,W
0637:  MOVWF  04
0638:  BCF    03.7
0639:  BTFSC  35.0
063A:  BSF    03.7
063B:  INCF   04,F
063C:  GOTO   629
063D:  MOVLW  03
063E:  MOVWF  36
063F:  MOVF   36,W
0640:  CALL   069
0641:  INCF   36,F
0642:  MOVWF  77
0643:  MOVWF  3E
0644:  CALL   505
0645:  MOVLW  08
0646:  SUBWF  36,W
0647:  BTFSS  03.2
0648:  GOTO   63F
0649:  MOVF   25,W
064A:  MOVWF  38
064B:  MOVLW  01
064C:  MOVWF  39
064D:  CALL   527
064E:  MOVLW  2F
064F:  MOVWF  3E
0650:  CALL   505
0651:  MOVF   26,W
0652:  MOVWF  38
0653:  MOVLW  01
0654:  MOVWF  39
0655:  CALL   527
0656:  MOVLW  2F
0657:  MOVWF  3E
0658:  CALL   505
0659:  MOVF   27,W
065A:  MOVWF  38
065B:  MOVLW  01
065C:  MOVWF  39
065D:  CALL   527
.................... 		} 
065E:  GOTO   58D
.................... //		delay_ms(1000); 
.................... 	} //infinite loop 
.................... 	return 0; 
065F:  MOVLW  00
0660:  MOVWF  78
.................... } //main 
0661:  SLEEP

Configuration Fuses:
   Word  1: 3F70   NOWDT PUT INTRC_IO MCLR BROWNOUT NOLVP NOCPD NOPROTECT
