CCS PCH C Compiler, Version 4.140, 21898               25-jul-13 16:45

               Filename:   E:\Eletronica\Projetos\Calendario\calendario.lst

               ROM used:   920 bytes (3%)
                           Largest free fragment is 31848
               RAM used:   8 (1%) at main() level
                           17 (1%) worst case
               Stack:     2 locations

*
0000:  GOTO   029C
.................... ///* 
.................... // * calendario.c 
.................... // * 
.................... // *  Created on: 02/02/2012 
.................... // *      Author: cuki 
.................... // */ 
....................  
.................... #include<18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
....................  
.................... #fuses H4 
.................... #use delay (crystal=8MHz, clock=32MHz) 
*
0082:  CLRF   FEA
0084:  MOVLW  08
0086:  MOVWF  FE9
0088:  MOVF   FEF,W
008A:  BZ    00A6
008C:  MOVLW  0A
008E:  MOVWF  01
0090:  CLRF   00
0092:  DECFSZ 00,F
0094:  BRA    0092
0096:  DECFSZ 01,F
0098:  BRA    0090
009A:  MOVLW  5F
009C:  MOVWF  00
009E:  DECFSZ 00,F
00A0:  BRA    009E
00A2:  DECFSZ FEF,F
00A4:  BRA    008C
00A6:  GOTO   0314 (RETURN)
.................... #use rs232(baud=9600,xmit=PIN_C6,rcv=PIN_C7) 
.................... #use i2c(master, sda=PIN_C4, scl=PIN_C3, fast=50000) 
*
0016:  MOVLW  08
0018:  MOVWF  01
001A:  MOVLW  18
001C:  MOVWF  00
001E:  DECFSZ 00,F
0020:  BRA    001E
0022:  BCF    F8B.3
0024:  BCF    F94.3
0026:  MOVLW  18
0028:  MOVWF  00
002A:  DECFSZ 00,F
002C:  BRA    002A
002E:  RLCF   09,F
0030:  BCF    F8B.4
0032:  BTFSC  FD8.0
0034:  BSF    F94.4
0036:  BTFSS  FD8.0
0038:  BCF    F94.4
003A:  BSF    F94.3
003C:  BTFSS  F82.3
003E:  BRA    003C
0040:  DECFSZ 01,F
0042:  BRA    001A
0044:  MOVLW  18
0046:  MOVWF  00
0048:  DECFSZ 00,F
004A:  BRA    0048
004C:  BCF    F8B.3
004E:  BCF    F94.3
0050:  NOP   
0052:  BSF    F94.4
0054:  MOVLW  18
0056:  MOVWF  00
0058:  DECFSZ 00,F
005A:  BRA    0058
005C:  MOVLW  18
005E:  MOVWF  00
0060:  DECFSZ 00,F
0062:  BRA    0060
0064:  BSF    F94.3
0066:  BTFSS  F82.3
0068:  BRA    0066
006A:  CLRF   01
006C:  MOVLW  18
006E:  MOVWF  00
0070:  DECFSZ 00,F
0072:  BRA    0070
0074:  BTFSC  F82.4
0076:  BSF    01.0
0078:  BCF    F8B.3
007A:  BCF    F94.3
007C:  BCF    F8B.4
007E:  BCF    F94.4
0080:  RETURN 0
*
00AA:  MOVLW  08
00AC:  MOVWF  0A
00AE:  MOVFF  00,0B
00B2:  BSF    F94.4
00B4:  MOVLW  18
00B6:  MOVWF  00
00B8:  DECFSZ 00,F
00BA:  BRA    00B8
00BC:  BSF    F94.3
00BE:  BTFSS  F82.3
00C0:  BRA    00BE
00C2:  BTFSC  F82.4
00C4:  BSF    FD8.0
00C6:  BTFSS  F82.4
00C8:  BCF    FD8.0
00CA:  RLCF   01,F
00CC:  MOVLW  18
00CE:  MOVWF  00
00D0:  DECFSZ 00,F
00D2:  BRA    00D0
00D4:  BCF    F94.3
00D6:  BCF    F8B.3
00D8:  DECFSZ 0A,F
00DA:  BRA    00B2
00DC:  BSF    F94.4
00DE:  MOVLW  18
00E0:  MOVWF  00
00E2:  DECFSZ 00,F
00E4:  BRA    00E2
00E6:  BCF    F8B.4
00E8:  MOVF   0B,W
00EA:  BTFSS  FD8.2
00EC:  BCF    F94.4
00EE:  NOP   
00F0:  BSF    F94.3
00F2:  BTFSS  F82.3
00F4:  BRA    00F2
00F6:  MOVLW  18
00F8:  MOVWF  00
00FA:  DECFSZ 00,F
00FC:  BRA    00FA
00FE:  BCF    F8B.3
0100:  BCF    F94.3
0102:  MOVLW  18
0104:  MOVWF  00
0106:  DECFSZ 00,F
0108:  BRA    0106
010A:  BCF    F8B.4
010C:  BCF    F94.4
010E:  GOTO   0176 (RETURN)
....................  
.................... #define disp_addr	0xD0 
.................... #define sec_addr	0x00 
....................  
.................... int segundos, LSB, MSB; 
....................  
.................... void apagar(int addr) { 
.................... 	i2c_write(addr); 
.................... 	i2c_write(sec_addr); 
.................... 	i2c_write(0); 
.................... 	i2c_write(0); 
.................... 	i2c_write(0); 
.................... 	i2c_write(0); 
.................... 	i2c_write(0); 
.................... 	i2c_write(0); 
.................... 	i2c_write(0); 
.................... } 
....................  
.................... short check(int addr) { 
.................... 	short ack = 1; 
.................... 	i2c_start(); 
.................... 	ack = i2c_write(addr); 
.................... 	i2c_stop(); 
.................... 	return ack; 
.................... } 
....................  
.................... int ler_dado(int addr) { 
0112:  CLRF   08
.................... 	int leitura = 0; 
....................  
.................... 	i2c_start(); 
0114:  BSF    F94.4
0116:  MOVLW  18
0118:  MOVWF  00
011A:  DECFSZ 00,F
011C:  BRA    011A
011E:  BSF    F94.3
0120:  MOVLW  18
0122:  MOVWF  00
0124:  DECFSZ 00,F
0126:  BRA    0124
0128:  BCF    F8B.4
012A:  BCF    F94.4
012C:  MOVLW  18
012E:  MOVWF  00
0130:  DECFSZ 00,F
0132:  BRA    0130
0134:  BCF    F8B.3
0136:  BCF    F94.3
.................... 	i2c_write(disp_addr); 
0138:  MOVLW  D0
013A:  MOVWF  09
013C:  RCALL  0016
.................... 	i2c_write(addr); 
013E:  MOVFF  07,09
0142:  RCALL  0016
.................... 	i2c_start(); 
0144:  BSF    F94.4
0146:  MOVLW  18
0148:  MOVWF  00
014A:  DECFSZ 00,F
014C:  BRA    014A
014E:  BSF    F94.3
0150:  MOVLW  18
0152:  MOVWF  00
0154:  DECFSZ 00,F
0156:  BRA    0154
0158:  BTFSS  F82.3
015A:  BRA    0158
015C:  BCF    F8B.4
015E:  BCF    F94.4
0160:  MOVLW  18
0162:  MOVWF  00
0164:  DECFSZ 00,F
0166:  BRA    0164
0168:  BCF    F8B.3
016A:  BCF    F94.3
.................... 	i2c_write(disp_addr + 1); 
016C:  MOVLW  D1
016E:  MOVWF  09
0170:  RCALL  0016
.................... 	leitura = i2c_read(0); 
0172:  CLRF   00
0174:  BRA    00AA
0176:  MOVFF  01,08
.................... 	i2c_stop(); 
017A:  BCF    F94.4
017C:  NOP   
017E:  BSF    F94.3
0180:  BTFSS  F82.3
0182:  BRA    0180
0184:  MOVLW  18
0186:  MOVWF  00
0188:  DECFSZ 00,F
018A:  BRA    0188
018C:  BRA    018E
018E:  NOP   
0190:  BSF    F94.4
0192:  MOVLW  18
0194:  MOVWF  00
0196:  DECFSZ 00,F
0198:  BRA    0196
.................... 	return leitura; 
019A:  MOVFF  08,01
.................... } 
019E:  GOTO   031E (RETURN)
....................  
.................... int ler_segundos(int addr) { 
.................... 	int leitura, LSB, MSB; 
....................  
.................... 	leitura = ler_dado(addr); 
.................... 	LSB = (leitura | 0xF0) & 0x0F; 
.................... 	MSB = ((leitura | 0x0F) & 0x70) >> 4; 
....................  
.................... 	return 10 * MSB + LSB; 
.................... } 
....................  
.................... void ds1307_init(void) { 
.................... 	int seconds = 0; 
....................  
.................... 	i2c_start(); 
.................... 	i2c_write(0xD0);      // WR to RTC 
.................... 	i2c_write(0x00);      // REG 0 
.................... 	i2c_start(); 
.................... 	i2c_write(0xD1);      // RD from RTC 
.................... 	seconds = i2c_read(0); // Read current "seconds" in DS1307 
.................... 	i2c_stop(); 
.................... //	seconds &= 0x7F; 
....................  
.................... 	delay_us(3); 
....................  
.................... 	i2c_start(); 
.................... 	i2c_write(0xD0);      // WR to RTC 
.................... 	i2c_write(0x00);      // REG 0 
.................... 	i2c_write(seconds); // Start oscillator with current "seconds value 
.................... 	i2c_start(); 
.................... 	i2c_write(0xD0);      // WR to RTC 
.................... 	i2c_write(0x07);      // Control Register 
.................... 	i2c_write(0x10);     // Disable squarewave output pin 
.................... 	i2c_stop(); 
....................  
.................... } 
....................  
.................... int main(void) { 
*
029C:  CLRF   FF8
029E:  BCF    FD0.7
02A0:  CLRF   FEA
02A2:  CLRF   FE9
02A4:  MOVLW  33
02A6:  MOVWF  FAF
02A8:  MOVLW  A2
02AA:  MOVWF  FAC
02AC:  MOVLW  90
02AE:  MOVWF  FAB
02B0:  BSF    FC1.0
02B2:  BSF    FC1.1
02B4:  BSF    FC1.2
02B6:  BCF    FC1.3
....................  
.................... 	/*	if (check(disp_addr)) { 
.................... 	 printf("\fErro, nao responde"); 
.................... 	 return 1; 
.................... 	 } else { 
.................... 	 printf("\fDisp. OK..."); 
.................... 	 } 
....................  
.................... 	 ds1307_init();*/ 
....................  
.................... 	i2c_start(); 
02B8:  BSF    F94.4
02BA:  MOVLW  18
02BC:  MOVWF  00
02BE:  DECFSZ 00,F
02C0:  BRA    02BE
02C2:  BSF    F94.3
02C4:  MOVLW  18
02C6:  MOVWF  00
02C8:  DECFSZ 00,F
02CA:  BRA    02C8
02CC:  BCF    F8B.4
02CE:  BCF    F94.4
02D0:  MOVLW  18
02D2:  MOVWF  00
02D4:  DECFSZ 00,F
02D6:  BRA    02D4
02D8:  BCF    F8B.3
02DA:  BCF    F94.3
.................... 	i2c_write(0xD0);      // WR to RTC 
02DC:  MOVLW  D0
02DE:  MOVWF  09
02E0:  RCALL  0016
.................... 	i2c_write(0x00);      // REG 0 
02E2:  CLRF   09
02E4:  RCALL  0016
.................... 	i2c_write(0); // Start oscillator with current "seconds value 
02E6:  CLRF   09
02E8:  RCALL  0016
.................... 	i2c_stop(); 
02EA:  BCF    F94.4
02EC:  NOP   
02EE:  BSF    F94.3
02F0:  BTFSS  F82.3
02F2:  BRA    02F0
02F4:  MOVLW  18
02F6:  MOVWF  00
02F8:  DECFSZ 00,F
02FA:  BRA    02F8
02FC:  BRA    02FE
02FE:  NOP   
0300:  BSF    F94.4
0302:  MOVLW  18
0304:  MOVWF  00
0306:  DECFSZ 00,F
0308:  BRA    0306
....................  
.................... 	while (TRUE) { 
.................... 		delay_ms(500); 
030A:  MOVLW  02
030C:  MOVWF  07
030E:  MOVLW  FA
0310:  MOVWF  08
0312:  BRA    0082
0314:  DECFSZ 07,F
0316:  BRA    030E
.................... //		segundos = ler_segundos(disp_addr); 
.................... 		segundos = ler_dado(disp_addr); 
0318:  MOVLW  D0
031A:  MOVWF  07
031C:  BRA    0112
031E:  MOVFF  01,04
.................... 		LSB = (segundos | 0xF0) & 0x0F; 
0322:  MOVF   04,W
0324:  IORLW  F0
0326:  ANDLW  0F
0328:  MOVWF  05
.................... 		MSB = ((segundos | 0x0F) & 0x70) >> 4; 
032A:  MOVF   04,W
032C:  IORLW  0F
032E:  ANDLW  70
0330:  MOVWF  00
0332:  SWAPF  00,W
0334:  MOVWF  06
0336:  MOVLW  0F
0338:  ANDWF  06,F
.................... 		printf("%2d LSB%2d MSB%2d", segundos, LSB, MSB); 
033A:  MOVFF  04,08
033E:  MOVLW  11
0340:  MOVWF  09
0342:  RCALL  01CA
0344:  MOVLW  07
0346:  MOVWF  FF6
0348:  MOVLW  00
034A:  MOVWF  FF7
034C:  MOVLW  04
034E:  MOVWF  07
0350:  RCALL  027C
0352:  MOVFF  05,08
0356:  MOVLW  11
0358:  MOVWF  09
035A:  RCALL  01CA
035C:  MOVLW  0E
035E:  MOVWF  FF6
0360:  MOVLW  00
0362:  MOVWF  FF7
0364:  MOVLW  04
0366:  MOVWF  07
0368:  RCALL  027C
036A:  MOVFF  06,08
036E:  MOVLW  11
0370:  MOVWF  09
0372:  RCALL  01CA
.................... 		printf("\n%2d", 10 * MSB + LSB); 
0374:  MOVF   06,W
0376:  MULLW  0A
0378:  MOVF   FF3,W
037A:  ADDWF  05,W
037C:  MOVWF  07
037E:  MOVLW  0A
0380:  BTFSS  F9E.4
0382:  BRA    0380
0384:  MOVWF  FAD
0386:  MOVFF  07,08
038A:  MOVLW  11
038C:  MOVWF  09
038E:  RCALL  01CA
.................... 	} 
0390:  BRA    030A
.................... 	return 0; 
0392:  MOVLW  00
0394:  MOVWF  01
.................... } 
0396:  SLEEP 

Configuration Fuses:
   Word  1: 2600   H4 NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
