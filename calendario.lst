CCS PCH C Compiler, Version 4.140, 21898               25-jul-13 15:45

               Filename:   E:\Eletronica\Projetos\Calendario\calendario.lst

               ROM used:   1020 bytes (3%)
                           Largest free fragment is 31748
               RAM used:   8 (1%) at main() level
                           12 (1%) worst case
               Stack:     2 locations

*
0000:  GOTO   0324
.................... ///* 
.................... // * calendario.c 
.................... // * 
.................... // *  Created on: 02/02/2012 
.................... // *      Author: cuki 
.................... // */ 
....................  
.................... #include<18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
....................  
.................... #fuses H4 
.................... #use delay (crystal=8MHz, clock=32MHz) 
*
0150:  CLRF   FEA
0152:  MOVLW  08
0154:  MOVWF  FE9
0156:  MOVF   FEF,W
0158:  BZ    0174
015A:  MOVLW  0A
015C:  MOVWF  01
015E:  CLRF   00
0160:  DECFSZ 00,F
0162:  BRA    0160
0164:  DECFSZ 01,F
0166:  BRA    015E
0168:  MOVLW  5F
016A:  MOVWF  00
016C:  DECFSZ 00,F
016E:  BRA    016C
0170:  DECFSZ FEF,F
0172:  BRA    015A
0174:  GOTO   0376 (RETURN)
.................... #use rs232(baud=9600,xmit=PIN_C6,rcv=PIN_C7) 
.................... #use i2c(master, sda=PIN_C4, scl=PIN_C3, fast=50000) 
*
0038:  MOVLW  08
003A:  MOVWF  01
003C:  MOVLW  18
003E:  MOVWF  00
0040:  DECFSZ 00,F
0042:  BRA    0040
0044:  BCF    F8B.3
0046:  BCF    F94.3
0048:  MOVLW  18
004A:  MOVWF  00
004C:  DECFSZ 00,F
004E:  BRA    004C
0050:  RLCF   09,F
0052:  BCF    F8B.4
0054:  BTFSC  FD8.0
0056:  BSF    F94.4
0058:  BTFSS  FD8.0
005A:  BCF    F94.4
005C:  BSF    F94.3
005E:  BTFSS  F82.3
0060:  BRA    005E
0062:  DECFSZ 01,F
0064:  BRA    003C
0066:  MOVLW  18
0068:  MOVWF  00
006A:  DECFSZ 00,F
006C:  BRA    006A
006E:  BCF    F8B.3
0070:  BCF    F94.3
0072:  NOP   
0074:  BSF    F94.4
0076:  MOVLW  18
0078:  MOVWF  00
007A:  DECFSZ 00,F
007C:  BRA    007A
007E:  MOVLW  18
0080:  MOVWF  00
0082:  DECFSZ 00,F
0084:  BRA    0082
0086:  BSF    F94.3
0088:  BTFSS  F82.3
008A:  BRA    0088
008C:  CLRF   01
008E:  MOVLW  18
0090:  MOVWF  00
0092:  DECFSZ 00,F
0094:  BRA    0092
0096:  BTFSC  F82.4
0098:  BSF    01.0
009A:  BCF    F8B.3
009C:  BCF    F94.3
009E:  BCF    F8B.4
00A0:  BCF    F94.4
00A2:  RETURN 0
*
0178:  MOVLW  08
017A:  MOVWF  0A
017C:  MOVFF  00,0B
0180:  BSF    F94.4
0182:  MOVLW  18
0184:  MOVWF  00
0186:  DECFSZ 00,F
0188:  BRA    0186
018A:  BSF    F94.3
018C:  BTFSS  F82.3
018E:  BRA    018C
0190:  BTFSC  F82.4
0192:  BSF    FD8.0
0194:  BTFSS  F82.4
0196:  BCF    FD8.0
0198:  RLCF   01,F
019A:  MOVLW  18
019C:  MOVWF  00
019E:  DECFSZ 00,F
01A0:  BRA    019E
01A2:  BCF    F94.3
01A4:  BCF    F8B.3
01A6:  DECFSZ 0A,F
01A8:  BRA    0180
01AA:  BSF    F94.4
01AC:  MOVLW  18
01AE:  MOVWF  00
01B0:  DECFSZ 00,F
01B2:  BRA    01B0
01B4:  BCF    F8B.4
01B6:  MOVF   0B,W
01B8:  BTFSS  FD8.2
01BA:  BCF    F94.4
01BC:  NOP   
01BE:  BSF    F94.3
01C0:  BTFSS  F82.3
01C2:  BRA    01C0
01C4:  MOVLW  18
01C6:  MOVWF  00
01C8:  DECFSZ 00,F
01CA:  BRA    01C8
01CC:  BCF    F8B.3
01CE:  BCF    F94.3
01D0:  MOVLW  18
01D2:  MOVWF  00
01D4:  DECFSZ 00,F
01D6:  BRA    01D4
01D8:  BCF    F8B.4
01DA:  BCF    F94.4
01DC:  GOTO   0244 (RETURN)
....................  
.................... #define disp_addr	0xD0 
.................... #define sec_addr	0x00 
....................  
.................... int segundos, LSB, MSB; 
....................  
.................... void apagar(int addr) { 
.................... 	i2c_write(addr); 
*
0126:  MOVFF  07,09
012A:  RCALL  0038
.................... 	i2c_write(sec_addr); 
012C:  CLRF   09
012E:  RCALL  0038
.................... 	i2c_write(0); 
0130:  CLRF   09
0132:  RCALL  0038
.................... 	i2c_write(0); 
0134:  CLRF   09
0136:  RCALL  0038
.................... 	i2c_write(0); 
0138:  CLRF   09
013A:  RCALL  0038
.................... 	i2c_write(0); 
013C:  CLRF   09
013E:  RCALL  0038
.................... 	i2c_write(0); 
0140:  CLRF   09
0142:  RCALL  0038
.................... 	i2c_write(0); 
0144:  CLRF   09
0146:  RCALL  0038
.................... 	i2c_write(0); 
0148:  CLRF   09
014A:  RCALL  0038
.................... } 
014C:  GOTO   036C (RETURN)
....................  
.................... short check(int addr) { 
*
00A4:  BSF    08.0
.................... 	short ack = 1; 
.................... 	i2c_start(); 
00A6:  BSF    F94.4
00A8:  MOVLW  18
00AA:  MOVWF  00
00AC:  DECFSZ 00,F
00AE:  BRA    00AC
00B0:  BSF    F94.3
00B2:  MOVLW  18
00B4:  MOVWF  00
00B6:  DECFSZ 00,F
00B8:  BRA    00B6
00BA:  BCF    F8B.4
00BC:  BCF    F94.4
00BE:  MOVLW  18
00C0:  MOVWF  00
00C2:  DECFSZ 00,F
00C4:  BRA    00C2
00C6:  BCF    F8B.3
00C8:  BCF    F94.3
.................... 	ack = i2c_write(addr); 
00CA:  MOVFF  07,09
00CE:  RCALL  0038
00D0:  MOVF   01,W
00D2:  BCF    08.0
00D4:  BTFSC  01.0
00D6:  BSF    08.0
.................... 	i2c_stop(); 
00D8:  BCF    F94.4
00DA:  NOP   
00DC:  BSF    F94.3
00DE:  BTFSS  F82.3
00E0:  BRA    00DE
00E2:  MOVLW  18
00E4:  MOVWF  00
00E6:  DECFSZ 00,F
00E8:  BRA    00E6
00EA:  BRA    00EC
00EC:  NOP   
00EE:  BSF    F94.4
00F0:  MOVLW  18
00F2:  MOVWF  00
00F4:  DECFSZ 00,F
00F6:  BRA    00F4
.................... 	return ack; 
00F8:  MOVLW  00
00FA:  BTFSC  08.0
00FC:  MOVLW  01
00FE:  MOVWF  01
.................... } 
0100:  GOTO   0346 (RETURN)
....................  
.................... int ler_dado(int addr) { 
*
01E0:  CLRF   08
.................... 	int leitura = 0; 
....................  
.................... 	i2c_start(); 
01E2:  BSF    F94.4
01E4:  MOVLW  18
01E6:  MOVWF  00
01E8:  DECFSZ 00,F
01EA:  BRA    01E8
01EC:  BSF    F94.3
01EE:  MOVLW  18
01F0:  MOVWF  00
01F2:  DECFSZ 00,F
01F4:  BRA    01F2
01F6:  BCF    F8B.4
01F8:  BCF    F94.4
01FA:  MOVLW  18
01FC:  MOVWF  00
01FE:  DECFSZ 00,F
0200:  BRA    01FE
0202:  BCF    F8B.3
0204:  BCF    F94.3
.................... 	i2c_write(disp_addr); 
0206:  MOVLW  D0
0208:  MOVWF  09
020A:  RCALL  0038
.................... 	i2c_write(addr); 
020C:  MOVFF  07,09
0210:  RCALL  0038
.................... 	i2c_start(); 
0212:  BSF    F94.4
0214:  MOVLW  18
0216:  MOVWF  00
0218:  DECFSZ 00,F
021A:  BRA    0218
021C:  BSF    F94.3
021E:  MOVLW  18
0220:  MOVWF  00
0222:  DECFSZ 00,F
0224:  BRA    0222
0226:  BTFSS  F82.3
0228:  BRA    0226
022A:  BCF    F8B.4
022C:  BCF    F94.4
022E:  MOVLW  18
0230:  MOVWF  00
0232:  DECFSZ 00,F
0234:  BRA    0232
0236:  BCF    F8B.3
0238:  BCF    F94.3
.................... 	i2c_write(disp_addr + 1); 
023A:  MOVLW  D1
023C:  MOVWF  09
023E:  RCALL  0038
.................... 	leitura = i2c_read(0); 
0240:  CLRF   00
0242:  BRA    0178
0244:  MOVFF  01,08
.................... 	i2c_stop(); 
0248:  BCF    F94.4
024A:  NOP   
024C:  BSF    F94.3
024E:  BTFSS  F82.3
0250:  BRA    024E
0252:  MOVLW  18
0254:  MOVWF  00
0256:  DECFSZ 00,F
0258:  BRA    0256
025A:  BRA    025C
025C:  NOP   
025E:  BSF    F94.4
0260:  MOVLW  18
0262:  MOVWF  00
0264:  DECFSZ 00,F
0266:  BRA    0264
.................... 	return leitura; 
0268:  MOVFF  08,01
.................... } 
026C:  GOTO   037E (RETURN)
....................  
.................... int main(void) { 
*
0324:  CLRF   FF8
0326:  BCF    FD0.7
0328:  CLRF   FEA
032A:  CLRF   FE9
032C:  MOVLW  33
032E:  MOVWF  FAF
0330:  MOVLW  A2
0332:  MOVWF  FAC
0334:  MOVLW  90
0336:  MOVWF  FAB
0338:  BSF    FC1.0
033A:  BSF    FC1.1
033C:  BSF    FC1.2
033E:  BCF    FC1.3
....................  
.................... 	if (check(disp_addr)) { 
0340:  MOVLW  D0
0342:  MOVWF  07
0344:  BRA    00A4
0346:  MOVF   01,F
0348:  BZ    035C
.................... 		printf("\fErro, nao responde"); 
034A:  MOVLW  04
034C:  MOVWF  FF6
034E:  MOVLW  00
0350:  MOVWF  FF7
0352:  RCALL  0104
.................... 		return 1; 
0354:  MOVLW  01
0356:  MOVWF  01
0358:  BRA    03FA
.................... 	} else { 
035A:  BRA    0366
.................... 		printf("\fDisp. OK..."); 
035C:  MOVLW  18
035E:  MOVWF  FF6
0360:  MOVLW  00
0362:  MOVWF  FF7
0364:  RCALL  0104
.................... 	} 
....................  
.................... 	apagar(disp_addr); 
0366:  MOVLW  D0
0368:  MOVWF  07
036A:  BRA    0126
....................  
.................... 	while (TRUE) { 
.................... 		delay_ms(500); 
036C:  MOVLW  02
036E:  MOVWF  07
0370:  MOVLW  FA
0372:  MOVWF  08
0374:  BRA    0150
0376:  DECFSZ 07,F
0378:  BRA    0370
.................... 		segundos = ler_dado(sec_addr); 
037A:  CLRF   07
037C:  BRA    01E0
037E:  MOVFF  01,04
.................... 		LSB = segundos & 0x0F; 
0382:  MOVF   04,W
0384:  ANDLW  0F
0386:  MOVWF  05
.................... 		MSB = (segundos & 0x70) >> 4; 
0388:  MOVF   04,W
038A:  ANDLW  70
038C:  MOVWF  00
038E:  SWAPF  00,W
0390:  MOVWF  06
0392:  MOVLW  0F
0394:  ANDWF  06,F
.................... 		printf("\f%u LSB:%u MSB:%u", segundos, LSB, MSB); 
0396:  MOVLW  0C
0398:  BTFSS  F9E.4
039A:  BRA    0398
039C:  MOVWF  FAD
039E:  MOVFF  04,07
03A2:  MOVLW  1B
03A4:  MOVWF  08
03A6:  RCALL  0298
03A8:  MOVLW  29
03AA:  MOVWF  FF6
03AC:  MOVLW  00
03AE:  MOVWF  FF7
03B0:  MOVLW  05
03B2:  MOVWF  07
03B4:  RCALL  0304
03B6:  MOVFF  05,07
03BA:  MOVLW  1B
03BC:  MOVWF  08
03BE:  RCALL  0298
03C0:  MOVLW  30
03C2:  MOVWF  FF6
03C4:  MOVLW  00
03C6:  MOVWF  FF7
03C8:  MOVLW  05
03CA:  MOVWF  07
03CC:  RCALL  0304
03CE:  MOVFF  06,07
03D2:  MOVLW  1B
03D4:  MOVWF  08
03D6:  RCALL  0298
.................... 		printf("\n%u%u", MSB, LSB); 
03D8:  MOVLW  0A
03DA:  BTFSS  F9E.4
03DC:  BRA    03DA
03DE:  MOVWF  FAD
03E0:  MOVFF  06,07
03E4:  MOVLW  1B
03E6:  MOVWF  08
03E8:  RCALL  0298
03EA:  MOVFF  05,07
03EE:  MOVLW  1B
03F0:  MOVWF  08
03F2:  RCALL  0298
.................... 	} 
03F4:  BRA    036C
.................... 	return 0; 
03F6:  MOVLW  00
03F8:  MOVWF  01
.................... } 
03FA:  SLEEP 

Configuration Fuses:
   Word  1: 2600   H4 NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
